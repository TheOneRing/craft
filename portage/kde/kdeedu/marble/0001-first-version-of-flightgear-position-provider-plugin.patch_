From c362b322f322a06944590f493c0453ff43cdb058 Mon Sep 17 00:00:00 2001
From: Ralf Habacker <ralf.habacker@freenet.de>
Date: Thu, 3 May 2012 11:00:29 +0200
Subject: [PATCH 1/4] first version of flightgear position provider

---
 Findnmealib.cmake                                  |   41 ++++
 src/plugins/positionprovider/CMakeLists.txt        |    8 +
 .../positionprovider/flightgear/CMakeLists.txt     |   14 ++
 .../FlightGearPositionProviderPlugin.cpp           |  214 ++++++++++++++++++++
 .../flightgear/FlightGearPositionProviderPlugin.h  |   70 +++++++
 5 files changed, 347 insertions(+), 0 deletions(-)
 create mode 100644 Findnmealib.cmake
 create mode 100644 src/plugins/positionprovider/flightgear/CMakeLists.txt
 create mode 100644 src/plugins/positionprovider/flightgear/FlightGearPositionProviderPlugin.cpp
 create mode 100644 src/plugins/positionprovider/flightgear/FlightGearPositionProviderPlugin.h

diff --git a/Findnmealib.cmake b/Findnmealib.cmake
new file mode 100644
index 0000000..f540a4e
--- /dev/null
+++ b/Findnmealib.cmake
@@ -0,0 +1,41 @@
+# - Try to find NMEA library
+# Once done this will define
+#
+#  NMEALIB_FOUND - system has NMEA library
+#  NMEALIB_INCLUDE_DIR - the NMEA include directory
+#  NMEALIB_LIBRARIES - Libraries needed to use NMEA
+#  NMEALIB_DEFINITIONS - Compiler switches required for using NMEA
+
+# Copyright (c) 2012 Ralf Habacker <ralf.habacker@freenet.de>
+# See Copyright.txt or http://www.cmake.org/HTML/Copyright.html for details.
+
+IF (NMEALIB_INCLUDE_DIR AND NMEALIB_LIBRARIES)
+  # Already in cache, be silent
+  SET(NMEALIB_FIND_QUIETLY TRUE)
+ENDIF (NMEALIB_INCLUDE_DIR AND NMEALIB_LIBRARIES)
+
+FIND_PATH(NMEALIB_INCLUDE_DIR nmea/nmea.h)
+
+SET(POTENTIAL_NMEALIB_LIBS libnmea nmealib nmea)
+FIND_LIBRARY(NMEALIB_LIBRARIES NAMES ${POTENTIAL_NMEALIB_LIBS})
+
+message(status ${NMEALIB_INCLUDE_DIR} ${NMEALIB_LIBRARIES})
+
+IF (NMEALIB_INCLUDE_DIR AND NMEALIB_LIBRARIES)
+   SET(CMAKE_REQUIRED_INCLUDES "${NMEALIB_INCLUDE_DIR}" "${CMAKE_REQUIRED_INCLUDES}")
+   set (NMEALIB_FOUND true)
+ENDIF (NMEALIB_INCLUDE_DIR AND NMEALIB_LIBRARIES)
+
+IF (NMEALIB_FOUND)
+  IF (NOT NMEALIB_FIND_QUIETLY)
+    MESSAGE(STATUS "Found NMEA: ${NMEALIB_LIBRARIES}")
+  ENDIF (NOT NMEALIB_FIND_QUIETLY)
+ELSE (NMEALIB_FOUND)
+  IF (NMEALIB_FIND_REQUIRED)
+    MESSAGE(STATUS "Looked for NMEA libraries named ${POTENTIAL_NMEALIB_LIBS}.")
+    MESSAGE(STATUS "Found no acceptable NMEA library. This is fatal.")
+    MESSAGE(FATAL_ERROR "Could NOT find NMEA")
+  ENDIF (NMEALIB_FIND_REQUIRED)
+ENDIF (NMEALIB_FOUND)
+
+MARK_AS_ADVANCED(NMEALIB_INCLUDE_DIR NMEALIB_LIBRARIES)
diff --git a/src/plugins/positionprovider/CMakeLists.txt b/src/plugins/positionprovider/CMakeLists.txt
index c9d9672..f6c3f40 100644
--- a/src/plugins/positionprovider/CMakeLists.txt
+++ b/src/plugins/positionprovider/CMakeLists.txt
@@ -1,3 +1,11 @@
+FIND_PACKAGE(nmealib)
+IF(NMEALIB_FOUND)
+    MESSAGE( STATUS "Building with flightgear position provider")
+    ADD_SUBDIRECTORY( flightgear )
+ELSE(NMEALIB_FOUND)
+     MESSAGE( STATUS "Not building with flightgear position provider")
+ENDIF(NMEALIB_FOUND)
+
 FIND_PACKAGE(libgps)
 IF(LIBGPS_FOUND)
      MESSAGE( STATUS "Building with gpsd position provider")
diff --git a/src/plugins/positionprovider/flightgear/CMakeLists.txt b/src/plugins/positionprovider/flightgear/CMakeLists.txt
new file mode 100644
index 0000000..742fa91
--- /dev/null
+++ b/src/plugins/positionprovider/flightgear/CMakeLists.txt
@@ -0,0 +1,14 @@
+PROJECT( FlightGearPositionProviderPlugin )
+
+INCLUDE_DIRECTORIES(
+ ${CMAKE_CURRENT_SOURCE_DIR}/src/plugins/positionprovider/flightgear
+ ${CMAKE_BINARY_DIR}/src/plugins/positionprovider/flightgear
+ ${QT_INCLUDE_DIR}
+)
+set( QT_USE_QTNETWORK  ON )
+INCLUDE(${QT_USE_FILE})
+
+set( flightgear_SRCS FlightGearPositionProviderPlugin.cpp )
+set( FlightGearPositionProviderPlugin_LIBS ${NMEALIB_LIBRARIES} )
+
+marble_add_plugin( FlightGearPositionProviderPlugin ${flightgear_SRCS} )
diff --git a/src/plugins/positionprovider/flightgear/FlightGearPositionProviderPlugin.cpp b/src/plugins/positionprovider/flightgear/FlightGearPositionProviderPlugin.cpp
new file mode 100644
index 0000000..af0eb9a
--- /dev/null
+++ b/src/plugins/positionprovider/flightgear/FlightGearPositionProviderPlugin.cpp
@@ -0,0 +1,214 @@
+//
+// This file is part of the Marble Virtual Globe.
+//
+// This program is free software licensed under the GNU LGPL. You can
+// find a copy of this license in LICENSE.txt in the top directory of
+// the source code.
+//
+// Copyright 2012 Ralf Habacker <ralf.habacker@freenet.de>
+//
+
+#include "FlightGearPositionProviderPlugin.h"
+
+#include "MarbleDebug.h"
+#include <math.h>
+
+#include <QUdpSocket>
+
+using namespace Marble;
+/* TRANSLATOR Marble::FlightGearPositionProviderPlugin */
+
+using namespace std;
+
+FlightGearPositionProviderPlugin::FlightGearPositionProviderPlugin()
+  : m_socket(0), m_speed( 0.0 ), m_track( 0.0 )
+{
+}
+
+FlightGearPositionProviderPlugin::~FlightGearPositionProviderPlugin()
+{
+    delete m_socket;
+    nmea_parser_destroy(&m_parser);
+}
+
+QString FlightGearPositionProviderPlugin::name() const
+{
+    return tr( "FlightGear position provider Plugin" );
+}
+
+QString FlightGearPositionProviderPlugin::nameId() const
+{
+    return QString::fromLatin1( "flightgear" );
+}
+
+QString FlightGearPositionProviderPlugin::guiString() const
+{
+    return tr( "FlightGear" );
+}
+
+QString FlightGearPositionProviderPlugin::version() const
+{
+    return "1.0";
+}
+
+QString FlightGearPositionProviderPlugin::description() const
+{
+    return tr( "Reports the position of running flightgear application." );
+}
+
+QString FlightGearPositionProviderPlugin::copyrightYears() const
+{
+    return "2012";
+}
+
+QList<PluginAuthor> FlightGearPositionProviderPlugin::pluginAuthors() const
+{
+    return QList<PluginAuthor>()
+            << PluginAuthor( QString::fromUtf8( "Ralf Habacker" ), "ralf.habacker@freenet.de" );
+
+}
+
+QIcon FlightGearPositionProviderPlugin::icon() const
+{
+    return QIcon();
+}
+
+void FlightGearPositionProviderPlugin::initialize()
+{
+    m_status = PositionProviderStatusAcquiring;
+    emit statusChanged( m_status );
+
+    m_socket = new QUdpSocket(this);
+    m_socket->bind(QHostAddress::LocalHost, 5500);
+    nmea_parser_init(&m_parser);
+    nmea_zero_INFO(&m_info);
+
+    connect(m_socket, SIGNAL(readyRead()),
+             this, SLOT(readPendingDatagrams()));
+}
+
+/**
+ fixed case where wrong date format is used '2404112' instead of '240412'
+*/
+bool fixBadGPRMC(QByteArray &line)
+{
+    if (!line.startsWith("$GPRMC"))
+        return false;
+
+    QStringList parts = QString(line).split(',');
+    if (parts[9].size() == 7) {
+        parts[9].remove(4,1);
+        line = parts.join(",").toLatin1();
+        // update crc
+        int crc = 0;
+        for(int i=1; i < line.size()-3; i++) {
+            crc ^= (int) line[i];
+        }
+        parts[11] = parts[11][0] + parts[11][1] +  QString::number(crc, 16).toUpper();
+
+        line = parts.join(",").toLatin1();
+        return true;
+    }
+    return false;
+}
+
+void FlightGearPositionProviderPlugin::readPendingDatagrams()
+{
+    while (m_socket->hasPendingDatagrams()) {
+        QByteArray datagram;
+        datagram.resize(m_socket->pendingDatagramSize());
+        QHostAddress sender;
+        quint16 senderPort;
+
+        m_socket->readDatagram(datagram.data(), datagram.size(), &sender, &senderPort);
+        foreach(QByteArray line, datagram.split('\n')) {
+            fixBadGPRMC(line);
+            //qDebug() << line;
+            line.append("\r\n");
+            nmea_parse(&m_parser, line.data(), line.size(), &m_info);
+            update();
+        }
+    }
+}
+
+void FlightGearPositionProviderPlugin::update()
+{
+    PositionProviderStatus oldStatus = m_status;
+    GeoDataCoordinates oldPosition = m_position;
+    if ( m_info.sig == 0 )
+        m_status = PositionProviderStatusUnavailable;
+    else {
+        m_status = PositionProviderStatusAvailable;
+
+        // fg atlas nmea output uses feet unit, which is not covered by nmealib <= 0.5.3
+#ifndef NMEA_TUD_FEED
+#define NMEA_TUD_FEED       (1/0.3048)      /**< Feet, meter / NMEA_TUD_FEED = feet */
+        qreal elevation = m_info.elv / NMEA_TUD_FEED;
+#else
+        qreal elevation = m_info.elv;
+#endif
+        m_position.set( nmea_ndeg2degree(m_info.lon), nmea_ndeg2degree(m_info.lat), elevation, GeoDataCoordinates::Degree );
+        m_accuracy.level = GeoDataAccuracy::Detailed;
+        // FIX  for misinterpreting
+        m_speed = m_info.speed * 0.51444444 / NMEA_TUD_KNOTS ;
+        m_track = m_info.direction;
+    }
+    if (m_status != oldStatus)
+        emit statusChanged( m_status );
+    if (!(oldPosition == m_position)) {
+        emit positionChanged( m_position, m_accuracy );
+    }
+}
+
+bool FlightGearPositionProviderPlugin::isInitialized() const
+{
+    return m_socket;
+}
+
+PositionProviderPlugin* FlightGearPositionProviderPlugin::newInstance() const
+{
+    return new FlightGearPositionProviderPlugin;
+}
+
+PositionProviderStatus FlightGearPositionProviderPlugin::status() const
+{
+    return m_status;
+}
+
+GeoDataCoordinates FlightGearPositionProviderPlugin::position() const
+{
+    return m_position;
+}
+
+GeoDataAccuracy FlightGearPositionProviderPlugin::accuracy() const
+{
+    return m_accuracy;
+}
+
+qreal FlightGearPositionProviderPlugin::speed() const
+{
+    return m_speed;
+}
+
+qreal FlightGearPositionProviderPlugin::direction() const
+{
+    return m_track;
+}
+
+QDateTime FlightGearPositionProviderPlugin::timestamp() const
+{
+    return m_timestamp;
+}
+
+
+QString FlightGearPositionProviderPlugin::error() const
+{
+    return QString();
+}
+
+
+Q_EXPORT_PLUGIN2( FlightGearPositionProviderPlugin, Marble::FlightGearPositionProviderPlugin )
+
+
+
+#include "FlightGearPositionProviderPlugin.moc"
diff --git a/src/plugins/positionprovider/flightgear/FlightGearPositionProviderPlugin.h b/src/plugins/positionprovider/flightgear/FlightGearPositionProviderPlugin.h
new file mode 100644
index 0000000..c7c7dac
--- /dev/null
+++ b/src/plugins/positionprovider/flightgear/FlightGearPositionProviderPlugin.h
@@ -0,0 +1,70 @@
+//
+// This file is part of the Marble Virtual Globe.
+//
+// This program is free software licensed under the GNU LGPL. You can
+// find a copy of this license in LICENSE.txt in the top directory of
+// the source code.
+//
+// Copyright 2012 Ralf Habacker <ralf.habacker@freenet.de>
+
+#ifndef FLIGHTGEARPOSITIONPROVIDERPLUGIN_H
+#define FLIGHTGEARPOSITIONPROVIDERPLUGIN_H
+
+#include "PositionProviderPlugin.h"
+
+#include <nmea/nmea.h>
+
+class QUdpSocket;
+
+namespace Marble
+{
+
+class FlightGearPositionProviderPlugin : public PositionProviderPlugin
+{
+    Q_OBJECT
+    Q_INTERFACES( Marble::PositionProviderPluginInterface )
+
+ public:
+    FlightGearPositionProviderPlugin();
+    virtual ~FlightGearPositionProviderPlugin();
+
+    virtual QString name() const;
+    virtual QString nameId() const;
+    virtual QString guiString() const;
+    virtual QString version() const;
+    virtual QString description() const;
+    virtual QString copyrightYears() const;
+    virtual QList<PluginAuthor> pluginAuthors() const;
+    virtual QIcon icon() const;
+    virtual void initialize();
+    virtual bool isInitialized() const;
+
+    virtual PositionProviderPlugin * newInstance() const;
+
+    virtual PositionProviderStatus status() const;
+    virtual GeoDataCoordinates position() const;
+    virtual GeoDataAccuracy accuracy() const;
+    virtual QString error() const;
+    virtual qreal speed() const;
+    virtual qreal direction() const;
+    virtual QDateTime timestamp() const;
+
+ private:
+    QUdpSocket* m_socket;
+    nmeaPARSER m_parser;
+    nmeaINFO m_info;
+    PositionProviderStatus m_status;
+    GeoDataCoordinates m_position;
+    GeoDataAccuracy m_accuracy;
+    qreal m_speed;
+    qreal m_track;
+    QDateTime m_timestamp;
+
+ private slots:
+    void readPendingDatagrams();
+    void update();
+};
+
+}
+
+#endif // FLIGHTGEARPOSITIONPROVIDERPLUGIN_H
-- 
1.7.4.msysgit.0

